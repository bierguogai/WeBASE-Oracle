buildscript {
    repositories {
        // 本地maven仓库
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.7.RELEASE")
    }
}

plugins {
    id 'maven'
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot' version "2.3.3.RELEASE"
    id 'io.spring.dependency-management' version "1.0.8.RELEASE"
}

group 'com.webank.oracle.service'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url 'https://dl.bintray.com/ethereum/maven/' }
    mavenCentral()
}


List lombok = [
        "org.projectlombok:lombok:1.18.12"
]

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework.boot:spring-boot-starter-log4j2"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    implementation 'org.fisco-bcos:web3sdk:2.6.2'
    implementation "com.alibaba:druid:1.2.1"
    implementation "org.apache.commons:commons-lang3:3.8.1"
    implementation 'io.springfox:springfox-swagger2:2.8.0'
    implementation 'io.springfox:springfox-swagger-ui:2.8.0'
    implementation "com.squareup.okhttp3:okhttp:4.9.0"

    testCompileOnly 'com.github.yuanmomo:mybatis-generator-plugin:1.0.10'

    compileOnly lombok
    annotationProcessor lombok

    testCompileOnly lombok
    testAnnotationProcessor lombok
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'


    implementation.setCanBeResolved(true)
    api.setCanBeResolved(true)
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

clean {
    delete 'dist'
    delete 'build'
    delete 'log'
}


idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
    destinationDir file('dist/apps')
    archiveName project.name + '.jar'
    exclude '**/*.xml'
    exclude '**/*.yml'
    exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from file('script/')
            into 'dist/script'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
    }
}
