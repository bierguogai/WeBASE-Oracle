apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

group 'com.webank.oracle.service'
version '1.0-SNAPSHOT'


//sourceCompatibility = 1.8
//targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url 'https://dl.bintray.com/ethereum/maven/' }
}

def springboot_version = "2.2.2.RELEASE"
List springboot = [
        "org.springframework.boot:spring-boot-starter-web:$springboot_version",
        "org.springframework.boot:spring-boot-starter-log4j2:$springboot_version"
]
List spring = ["org.springframework:spring-tx:5.2.2.RELEASE"]


List alibaba = [
        "com.alibaba:druid:1.1.21"
]

List commons = ["org.apache.commons:commons-lang3:3.8.1"]
List test = ["org.springframework.boot:spring-boot-starter-test:$springboot_version"]
List swagger = [
        'io.springfox:springfox-swagger2:2.8.0',
        'io.springfox:springfox-swagger-ui:2.8.0'
]

List http = ['org.apache.httpcomponents:httpclient:4.5.3']


dependencies {
    // guomi contract compile: USE 'socJ-all-0.4.25-gm' to REPLACE 'ethereum:solcJ-all'
    compile('org.fisco-bcos:web3sdk:2.5.0')
    //        {
//            exclude group:"org.ethereum"
//        }
    compile springboot, commons, swagger, spring, http
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
    compileOnly 'org.projectlombok:lombok:1.18.6'

    testCompile test
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

clean {
    delete 'dist'
    delete 'build'
    delete 'log'
}


jar {
    destinationDir file('dist/apps')
    archiveName project.name + '.jar'
    exclude '**/*.xml'
    exclude '**/*.yml'
    exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from file('script/')
            into 'dist/script'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
    }
}
