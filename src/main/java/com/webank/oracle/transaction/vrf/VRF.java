package com.webank.oracle.transaction.vrf;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicBytes;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.web3j.abi.datatypes.generated.StaticArray3;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.crypto.EncryptType;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class VRF extends Contract {
    public static final String[] BINARY_ARRAY = {"","61101082600260017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f01901c6111eb565b9050919050565b60008060008060006001809150915060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061105057fe5b897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806110a157fe5b8b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038a08905060006110d68383858561134d565b80925081995050506110ea88828e886113b7565b80925081995050506110fe88828c876113b7565b809250819950505060006111148d878b856113b7565b80925081995050506111288882868661134d565b809250819950505061113c88828e896113b7565b80925081995050508082146111d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061117357fe5b818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806111a057fe5b82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806111cd57fe5b81830996506111db565b8196505b5050505050509450945094915050565b6000806111f66114e7565b60208160006006811061120557fe5b60200201818152505060208160016006811061121d57fe5b60200201818152505060208160026006811061123557fe5b602002018181525050848160036006811061124c57fe5b602002018181525050838160046006811061126357fe5b6020020181815250507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8160056006811061129a57fe5b6020020181815250506112ab611509565b60208160c0846005600019fa92506000831415611330576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6269674d6f64457870206661696c75726521000000000000000000000000000081525060200191505060405180910390fd5b8060006001811061133d57fe5b6020020151935050505092915050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061137857fe5b8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806113a357fe5b848709809250819350505094509492505050565b60008060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806113e457fe5b878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061141357fe5b87877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f030990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061146257fe5b8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061148d57fe5b8689098094508195505050505094509492505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b604051806020016040528060019060208202803683378082019150509050509056fea2646970667358221220ce1d42e8fae5430f1bc961cda08fa01538a5c25a909f01c64185a5742d34f0e864736f6c634300060a0033"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"pk\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"gamma\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"cSSeed\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uWitness\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"cGammaWitness\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"sHashWitness\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zInv\",\"type\":\"uint256\"}],\"name\":\"TestRandom\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROOF_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"randomValueFromVRFProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"testRandomValueFromVRFProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String[] SM_BINARY_ARRAY = {"","61101082600260017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f01901c6111eb565b9050919050565b60008060008060006001809150915060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061105057fe5b897ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038808905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806110a157fe5b8b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f038a08905060006110d68383858561134d565b80925081995050506110ea88828e886113b7565b80925081995050506110fe88828c876113b7565b809250819950505060006111148d878b856113b7565b80925081995050506111288882868661134d565b809250819950505061113c88828e896113b7565b80925081995050508082146111d7577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061117357fe5b818a0998507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806111a057fe5b82890997507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806111cd57fe5b81830996506111db565b8196505b5050505050509450945094915050565b6000806111f66114e7565b60208160006006811061120557fe5b60200201818152505060208160016006811061121d57fe5b60200201818152505060208160026006811061123557fe5b602002018181525050848160036006811061124c57fe5b602002018181525050838160046006811061126357fe5b6020020181815250507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8160056006811061129a57fe5b6020020181815250506112ab611509565b60208160c0846005600019fa92506000831415611330576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6269674d6f64457870206661696c75726521000000000000000000000000000081525060200191505060405180910390fd5b8060006001811061133d57fe5b6020020151935050505092915050565b6000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061137857fe5b8487097ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806113a357fe5b848709809250819350505094509492505050565b60008060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f806113e457fe5b878509905060007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061141357fe5b87877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f030990507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061146257fe5b8183087ffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f8061148d57fe5b8689098094508195505050505094509492505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b604051806020016040528060019060208202803683378082019150509050509056fea264697066735822122023e23c2e66ca57df4f7ed38352b708a5e1e762e00baeecd704ab1f26336b647e64736f6c634300060a0033"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String FUNC_PROOF_LENGTH = "PROOF_LENGTH";

    public static final String FUNC_RANDOMVALUEFROMVRFPROOF = "randomValueFromVRFProof";

    public static final String FUNC_TESTRANDOMVALUEFROMVRFPROOF = "testRandomValueFromVRFProof";

    public static final Event TESTRANDOM_EVENT = new Event("TestRandom", 
            Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Uint256>>() {}, new TypeReference<StaticArray2<Uint256>>() {}, new TypeReference<StaticArray3<Uint256>>() {}, new TypeReference<Address>() {}, new TypeReference<StaticArray2<Uint256>>() {}, new TypeReference<StaticArray2<Uint256>>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected VRF(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VRF(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VRF(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(getBinary(), contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VRF(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(getBinary(), contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static String getBinary() {
        return (EncryptType.encryptType == EncryptType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public List<TestRandomEventResponse> getTestRandomEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TESTRANDOM_EVENT, transactionReceipt);
        ArrayList<TestRandomEventResponse> responses = new ArrayList<TestRandomEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TestRandomEventResponse typedResponse = new TestRandomEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pk = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.gamma = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.cSSeed = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.uWitness = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.cGammaWitness = (List<BigInteger>) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.sHashWitness = (List<BigInteger>) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.zInv = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerTestRandomEventLogFilter(String fromBlock, String toBlock, List<String> otherTopics, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TESTRANDOM_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void registerTestRandomEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(TESTRANDOM_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public RemoteCall<BigInteger> PROOF_LENGTH() {
        final Function function = new Function(FUNC_PROOF_LENGTH,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> randomValueFromVRFProof(byte[] proof) {
        final Function function = new Function(FUNC_RANDOMVALUEFROMVRFPROOF,
                Arrays.<Type>asList(new DynamicBytes(proof)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> testRandomValueFromVRFProof(byte[] proof) {
        final Function function = new Function(
                FUNC_TESTRANDOMVALUEFROMVRFPROOF,
                Arrays.<Type>asList(new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void testRandomValueFromVRFProof(byte[] proof, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TESTRANDOMVALUEFROMVRFPROOF,
                Arrays.<Type>asList(new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String testRandomValueFromVRFProofSeq(byte[] proof) {
        final Function function = new Function(
                FUNC_TESTRANDOMVALUEFROMVRFPROOF,
                Arrays.<Type>asList(new DynamicBytes(proof)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<byte[]> getTestRandomValueFromVRFProofInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TESTRANDOMVALUEFROMVRFPROOF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getTestRandomValueFromVRFProofOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TESTRANDOMVALUEFROMVRFPROOF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    @Deprecated
    public static VRF load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VRF(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VRF load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VRF(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VRF load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new VRF(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VRF load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VRF(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VRF> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VRF.class, web3j, credentials, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VRF> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VRF.class, web3j, credentials, gasPrice, gasLimit, getBinary(), "");
    }

    public static RemoteCall<VRF> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VRF.class, web3j, transactionManager, contractGasProvider, getBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VRF> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VRF.class, web3j, transactionManager, gasPrice, gasLimit, getBinary(), "");
    }

    public static class TestRandomEventResponse {
        public Log log;

        public List<BigInteger> pk;

        public List<BigInteger> gamma;

        public List<BigInteger> cSSeed;

        public String uWitness;

        public List<BigInteger> cGammaWitness;

        public List<BigInteger> sHashWitness;

        public BigInteger zInv;
    }
}
